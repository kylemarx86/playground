body, html{
  margin: 0;
  height: 100%;
  width: 100%;
  background: darkgray;
}


// for each color in the list, create a band that is 1/nth the width of the container, where n is the number of colors in the array
@mixin make-linear-gradient($colors...){
    $base: "linear-gradient(to bottom ";
    
    @for $i from 0 to length($colors){
        $temp: ", #{nth($colors, $i + 1)} #{($i) / length($colors) * 100}%, #{nth($colors, $i + 1)} #{($i + 1) / length($colors) * 100}%";
        $base: $base + $temp;
    }
    $base: $base + ")";
    background: unquote($base);
}

// for each color in the list, create a band that is 1/nth the width of the container, where n is the number of colors in the array
@mixin make-linear-gradient-forward-and-reverse($colors...){
    $base: "linear-gradient(to bottom ";
    
    // from 0 to 50%, create bands of color iterating through the colors in the list in the forwards direction. each band will be 1/(2n)th the height of the container div
    @for $i from 0 to length($colors){
        $temp: ", #{nth($colors, $i + 1)} #{($i) / length($colors) / 2 * 100}%, #{nth($colors, $i + 1)} #{($i + 1) / length($colors) / 2 * 100}%";
        $base: $base + $temp;
    }
    // from 50 to 100%, create bands of color iterating through the colors in the list in the backwards direction. each band will be 1/(2n)th the height of the container div
    @for $i from 0 to length($colors){
        $temp: ", #{nth($colors, length($colors) - ($i) )} #{50 + ($i) / length($colors) / 2 * 100}%, #{nth($colors, length($colors) - ($i) )} #{50 + ($i + 1) / length($colors) / 2 * 100}%";
        $base: $base + $temp;
    }
    $base: $base + ")";
    background: unquote($base);
}



@function find-type($base-color, $steps){
    $colors: "(#{$base-color} ";
    @for $i from 1 to $steps {
        $new-color: darken($base-color, 50 / $steps * ($i+1));
        $colors: $colors + " #{$new-color}";
    }
    $colors: $colors + ")";
    $colors: unquote($colors);
    
    @return type-of($colors);
}


// for each color in the list, create a band that is 1/nth the width of the container, where n is the number of colors in the array
@mixin make-linear-gradient-forward-and-reverse-from-single-color($base-color, $steps){

    // // create list of colors based on base-color
    // // start color list
    // $colors: "#{$base-color} ";
    // // $colors: "#{darken($base-color, 50 / $steps)} ";
    // // 
    // @for $i from 1 to $steps {
    //     // $percent: unquote("#{50 / $steps * ($i+1)}");
    //     $new-color: darken($base-color, 50 / $steps * ($i+1));
    //     $colors: $colors + " #{$new-color}";
    // }
    // $colors: unquote($colors);


    // create list of colors based on base-color
    // start color list
    $colors: ($base-color);
    @for $i from 1 to $steps {
        $new-color: darken($base-color, 50 / $steps * ($i+1));
        $colors: append($colors, $new-color);
    }

    $base: "linear-gradient(to bottom ";
    // from 0 to 50%, create bands of color iterating through the colors in the list in the forwards direction. each band will be 1/(2n)th the height of the container div
    @for $i from 0 to length($colors) {
        $temp: ", #{nth($colors, $i + 1)} #{$i / length($colors) / 2 * 100}%, #{nth($colors, $i + 1)} #{($i + 1) / length($colors) / 2 * 100}%";
        $base: $base + $temp;
    }
    // from 50 to 100%, create bands of color iterating through the colors in the list in the backwards direction. each band will be 1/(2n)th the height of the container div
    @for $i from 0 to length($colors){
        $temp: ", #{nth($colors, length($colors) - ($i) )} #{50 + ($i) / length($colors) / 2 * 100}%, #{nth($colors, length($colors) - ($i) )} #{50 + ($i + 1) / length($colors) / 2 * 100}%";
        $base: $base + $temp;
    }
    $base: $base + ")";
    background: unquote($base);
    // content: type-of($colors);
}



.main{
  width: 100%;
  height: 200px;
//   @include make-linear-gradient(red, blue, orange, yellow, green);
    // $color-list: red, blue, orange, yellow;
//   @include make-linear-gradient-forward-and-reverse(red, blue, orange);
//   @include make-linear-gradient-forward-and-reverse-from-single-color(red, 5);
  @include make-linear-gradient-forward-and-reverse-from-single-color(lightgreen, 7);
//   background: darken(blue, 10%);
//   @include make-linear-gradient-forward-and-reverse-from-single-color(blue, 5);
//   @include make-linear-gradient-forward-and-reverse($color-list);
}